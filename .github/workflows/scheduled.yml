name: Scheduled Tasks

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch: # Allow manual triggering

jobs:
  dependency-update:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Check for outdated dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-review
        pip install -r requirements.txt
        
        # Generate dependency update report
        pip-review --local --output=update-report.txt || echo "Some dependencies may be outdated"
        
        # Check for security vulnerabilities
        pip install safety
        safety check --full-report > security-report.txt || echo "Security vulnerabilities found" > security-report.txt
        
        echo "Dependency check completed"
    
    - name: Create issue for dependency updates
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const updateReport = fs.readFileSync('update-report.txt', 'utf8');
            const securityReport = fs.readFileSync('security-report.txt', 'utf8');
            
            const body = `## 🔄 Weekly Dependency Check
            
            ### 📦 Outdated Dependencies
            \`\`\`
            ${updateReport}
            \`\`\`
            
            ### 🔒 Security Report
            \`\`\`
            ${securityReport}
            \`\`\`
            
            ---
            
            **This issue was automatically generated by the scheduled workflow.**
            
            To update dependencies:
            1. Review the outdated packages above
            2. Update requirements.txt with new versions
            3. Test the application thoroughly
            4. Create a pull request with the updates
            
            **Note**: Only update dependencies that are compatible and well-tested.`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🔄 Weekly Dependency Update Check',
              body: body,
              labels: ['dependencies', 'automated', 'weekly']
            });
          } catch (error) {
            console.log('No dependency updates found or error occurred');
          }

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run security scan
      run: |
        # Install security scanning tools
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety
        
        # Run security checks
        bandit -r . -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
        
        echo "Security scan completed"
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: weekly-security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  changelog-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check changelog
      id: changelog_check
      run: |
        # Check if CHANGELOG.md has unreleased section
        if grep -q "## \[Unreleased\]" CHANGELOG.md; then
          echo "CHANGELOG.md has unreleased changes"
          UNRELEASED_CHANGES=true
        else
          echo "No unreleased changes in CHANGELOG.md"
          UNRELEASED_CHANGES=false
        fi
        
        # Check if there are commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          COMMITS_SINCE_TAG=$(git log --oneline ${LAST_TAG}..HEAD | wc -l)
          echo "Commits since last tag: $COMMITS_SINCE_TAG"
        else
          COMMITS_SINCE_TAG=0
        fi
        
        echo "unreleased_changes=$UNRELEASED_CHANGES" >> $GITHUB_OUTPUT
        echo "commits_since_tag=$COMMITS_SINCE_TAG" >> $GITHUB_OUTPUT
    
    - name: Create release reminder
      if: steps.changelog_check.outputs.unreleased_changes == 'true' && steps.changelog_check.outputs.commits_since_tag != '0'
      uses: actions/github-script@v7
      with:
        script: |
          const body = `## 🚀 Release Reminder
          
          It looks like you have unreleased changes in your CHANGELOG.md and commits since the last tag.
          
          ### 📋 What to do:
          1. Review the changes in CHANGELOG.md
          2. Create a new tag: \`git tag -a v1.1.0 -m "Release v1.1.0"\`
          3. Push the tag: \`git push origin v1.1.0\`
          4. The GitHub Actions will automatically create a release
          
          ### 🔄 Alternative - Auto Release:
          If you want automatic releases, use conventional commit messages:
          - \`feat: new feature\` (minor version bump)
          - \`fix: bug fix\` (patch version bump)
          - \`BREAKING CHANGE: major change\` (major version bump)
          
          ---
          
          **This reminder was automatically generated by the scheduled workflow.**`;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🚀 Release Reminder - Unreleased Changes Detected',
            body: body,
            labels: ['release', 'automated', 'reminder']
          });

  repository-health:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Repository health check
      run: |
        # Check repository health metrics
        echo "## 📊 Repository Health Report" > health-report.md
        echo "" >> health-report.md
        
        # Check file sizes
        echo "### 📁 File Sizes" >> health-report.md
        find . -name "*.py" -size +1M -exec ls -lh {} \; >> health-report.md || echo "No large Python files found" >> health-report.md
        
        # Check for TODO/FIXME comments
        echo "" >> health-report.md
        echo "### ⚠️ TODO/FIXME Comments" >> health-report.md
        grep -r "TODO\|FIXME\|XXX" . --exclude-dir=.git --exclude=*.md >> health-report.md || echo "No TODO/FIXME comments found" >> health-report.md
        
        # Check documentation
        echo "" >> health-report.md
        echo "### 📚 Documentation Status" >> health-report.md
        if [ -f "README.md" ]; then echo "✅ README.md exists" >> health-report.md; else echo "❌ README.md missing" >> health-report.md; fi
        if [ -f "CHANGELOG.md" ]; then echo "✅ CHANGELOG.md exists" >> health-report.md; else echo "❌ CHANGELOG.md missing" >> health-report.md; fi
        if [ -f "LICENSE" ]; then echo "✅ LICENSE exists" >> health-report.md; else echo "❌ LICENSE missing" >> health-report.md; fi
        if [ -f "CONTRIBUTING.md" ]; then echo "✅ CONTRIBUTING.md exists" >> health-report.md; else echo "❌ CONTRIBUTING.md missing" >> health-report.md; fi
        
        cat health-report.md
    
    - name: Upload health report
      uses: actions/upload-artifact@v4
      with:
        name: weekly-health-report
        path: health-report.md
        retention-days: 30 