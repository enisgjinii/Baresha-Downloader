name: Continuous Integration

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black
    
    - name: Lint with flake8
      shell: bash
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      shell: bash
      run: |
        black --check --diff .
    
    - name: Run tests
      shell: bash
      run: |
        # Create a simple test file if it doesn't exist
        if [ ! -f "tests/__init__.py" ]; then
          mkdir -p tests
          echo "# Test package" > tests/__init__.py
        fi
        
        # Run tests if they exist, otherwise skip
        if [ -f "tests/test_*.py" ] || [ -f "test_*.py" ]; then
          pytest --cov=./ --cov-report=xml --cov-report=term-missing
        else
          echo "No tests found, skipping test execution"
          # Create a dummy coverage file
          echo '<?xml version="1.0" ?><coverage version="5.3.1" timestamp="0" lines-valid="0" lines-covered="0" line-rate="0.0" branches-covered="0" branches-valid="0" branch-rate="0.0" complexity="0.0"><sources><source>.</source></sources><packages><package name="." line-rate="0.0" branch-rate="0.0" complexity="0.0"><classes/></package></packages></coverage>' > coverage.xml
        fi
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety
    
    - name: Run security checks
      shell: bash
      run: |
        # Run bandit security checks
        bandit -r . -f json -o bandit-report.json || true
        
        # Run safety checks for known vulnerabilities
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Test build process
      shell: bash
      run: |
        # Test that the build script works
        if [ -f "build_cross_platform.py" ]; then
          python build_cross_platform.py --test-only || echo "Build test failed, but continuing..."
        else
          echo "Build script not found, skipping build test"
        fi
    
          - name: Verify executable creation
        shell: bash
        run: |
          # Check if executables were created (platform specific)
          if [ "$RUNNER_OS" = "Windows" ]; then
            ls -la dist/
          elif [ "$RUNNER_OS" = "macOS" ]; then
            ls -la dist/
          else
            ls -la dist/
          fi

  dependency-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Check for outdated dependencies
      shell: bash
      run: |
        pip install pip-review
        pip-review --local --output=report.txt || echo "Some dependencies may be outdated"
        if [ -f "report.txt" ]; then
          cat report.txt
        else
          echo "No outdated dependencies found"
        fi
    
    - name: Check for security vulnerabilities
      shell: bash
      run: |
        pip install safety
        safety check --full-report

  documentation:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check documentation
      shell: bash
      run: |
        # Check if README exists and has content
        if [ ! -s README.md ]; then
          echo "README.md is empty or missing"
          exit 1
        fi
        
        # Check if CHANGELOG exists
        if [ ! -f CHANGELOG.md ]; then
          echo "CHANGELOG.md is missing"
          exit 1
        fi
        
        # Check if LICENSE exists
        if [ ! -f LICENSE ]; then
          echo "LICENSE is missing"
          exit 1
        fi
        
        echo "Documentation check passed"
    
    - name: Validate markdown
      shell: bash
      run: |
        # Basic markdown validation
        if grep -q "TODO\|FIXME\|XXX" README.md; then
          echo "Found TODO/FIXME/XXX in README.md"
          exit 1
        fi 